{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "K2GOARLL1Sdl",
        "outputId": "c7c7e88b-7c09-48a4-a98e-f3efd4efc026"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your budget in INR: 7000\n",
            "Here are the top stocks within your budget:\n",
            "📈 ITC.NS: 430.85 INR, Quantity: 16, Remaining Budget: 106.40 INR\n",
            "📈 SBIN.NS: 737.2 INR, Quantity: 9, Remaining Budget: 365.20 INR\n",
            "📈 ICICIBANK.NS: 1256.9 INR, Quantity: 5, Remaining Budget: 715.50 INR\n",
            "📈 RELIANCE.NS: 1266.7 INR, Quantity: 5, Remaining Budget: 666.50 INR\n",
            "📈 HDFCBANK.NS: 1732.75 INR, Quantity: 4, Remaining Budget: 69.00 INR\n",
            "📈 INFY.NS: 1903.65 INR, Quantity: 3, Remaining Budget: 1289.05 INR\n",
            "📈 KOTAKBANK.NS: 1929.25 INR, Quantity: 3, Remaining Budget: 1212.25 INR\n",
            "📈 LT.NS: 3336.9 INR, Quantity: 2, Remaining Budget: 326.20 INR\n",
            "📈 TCS.NS: 4029.4 INR, Quantity: 1, Remaining Budget: 2970.60 INR\n",
            "\n",
            "Disclaimer: Investing in the securities market carries risks. Always read and understand all related documents before investing. The information in this update is from sources we believe to be reliable but hasn't been independently verified, and no warranty is given regarding its accuracy or completeness. This is not an offer to buy or sell securities. Market conditions can lead to fluctuations in investment value. Investors should consider all risks, their financial situation, and seek professional advice. Past performance is not indicative of future results. YSL and its associates are not liable for any loss from using this information. Ensure compliance with local laws.\n",
            "\n"
          ]
        }
      ],
      "source": [
        "import yfinance as yf\n",
        "\n",
        "def get_top_stocks(budget):\n",
        "    # List of stock tickers you want to consider (You can expand this list)\n",
        "    tickers = ['TCS.NS', 'RELIANCE.NS', 'INFY.NS', 'HDFC.NS', 'ITC.NS', 'HDFCBANK.NS', 'KOTAKBANK.NS', 'ICICIBANK.NS', 'LT.NS', 'SBIN.NS']\n",
        "\n",
        "    affordable_stocks = []\n",
        "\n",
        "    for ticker in tickers:\n",
        "        stock = yf.Ticker(ticker)\n",
        "        price = stock.info.get('currentPrice', None)\n",
        "\n",
        "        if price and price <= budget:\n",
        "            affordable_stocks.append((ticker, price))\n",
        "\n",
        "    # Sort the stocks by price\n",
        "    affordable_stocks.sort(key=lambda x: x[1])\n",
        "\n",
        "    return affordable_stocks[:10]\n",
        "\n",
        "def display_logo(ticker_name):\n",
        "    stock_logo = \"📈\"  # Stock logo as a unicode character\n",
        "    return f\"{stock_logo} {ticker_name}\"\n",
        "\n",
        "# Ask the user for their budget\n",
        "budget = float(input(\"Enter your budget in INR: \"))\n",
        "\n",
        "# Get the top 10 stocks within the budget\n",
        "top_stocks = get_top_stocks(budget)\n",
        "\n",
        "# Display the top stocks and calculate the number of stocks that can be bought within the budget\n",
        "if top_stocks:\n",
        "    print(\"Here are the top stocks within your budget:\")\n",
        "    for ticker, price in top_stocks:\n",
        "        ticker_with_logo = display_logo(ticker)\n",
        "        quantity = int(budget // price)\n",
        "        remaining_budget = budget - (quantity * price)\n",
        "        print(f\"{ticker_with_logo}: {price} INR, Quantity: {quantity}, Remaining Budget: {remaining_budget:.2f} INR\")\n",
        "else:\n",
        "    print(\"Sorry, no stocks found within your budget.\")\n",
        "\n",
        "# Print disclaimer\n",
        "print(\"\"\"\n",
        "Disclaimer: Investing in the securities market carries risks. Always read and understand all related documents before investing. The information in this update is from sources we believe to be reliable but hasn't been independently verified, and no warranty is given regarding its accuracy or completeness. This is not an offer to buy or sell securities. Market conditions can lead to fluctuations in investment value. Investors should consider all risks, their financial situation, and seek professional advice. Past performance is not indicative of future results. YSL and its associates are not liable for any loss from using this information. Ensure compliance with local laws.\n",
        "\"\"\")"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "-4DlnFq31Y-e",
        "outputId": "f2345778-9e88-44d0-8bb7-115120d2a054"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter your budget in INR: 10000\n",
            "Enter the symbol of the first stock: tcs.ns\n",
            "Enter the symbol of the second stock: lt.ns\n",
            "\n",
            "📊 Stock Comparison Table:\n",
            "╒════╤═════════╤═══════════════════════╤══════════════╤═════════════╤══════════════════╤════════════════╤═══════════════╤═════════════╤══════════════╤═════════════╤══════════════════════════════════════════════╕\n",
            "│    │ Stock   │   Current Price (INR) │   Market Cap │   P/E Ratio │   Dividend Yield │   52-Week High │   52-Week Low │      Volume │   Avg Volume │     Revenue │ News Link                                    │\n",
            "╞════╪═════════╪═══════════════════════╪══════════════╪═════════════╪══════════════════╪════════════════╪═══════════════╪═════════════╪══════════════╪═════════════╪══════════════════════════════════════════════╡\n",
            "│  0 │ tcs.ns  │                4029.4 │  1.45787e+13 │     29.9072 │           0.0097 │        4592.25 │       3591.5  │ 1.5487e+06  │  2.15276e+06 │ 2.48692e+12 │ https://finance.yahoo.com/quote/tcs.ns/news/ │\n",
            "├────┼─────────┼───────────────────────┼──────────────┼─────────────┼──────────────────┼────────────────┼───────────────┼─────────────┼──────────────┼─────────────┼──────────────────────────────────────────────┤\n",
            "│  1 │ lt.ns   │                3336.9 │  4.58884e+12 │     32.957  │           0.0082 │        3963.5  │       3175.05 │ 1.72233e+06 │  2.0328e+06  │ 2.427e+12   │ https://finance.yahoo.com/quote/lt.ns/news/  │\n",
            "╘════╧═════════╧═══════════════════════╧══════════════╧═════════════╧══════════════════╧════════════════╧═══════════════╧═════════════╧══════════════╧═════════════╧══════════════════════════════════════════════╛\n",
            "\n",
            "🎯 Investment Recommendation:\n",
            "- 🏆 Recommended Stock: lt.ns\n",
            "- 1️⃣ Current Price: ₹3336.9 is within your budget.\n",
            "- 2️⃣ P/E Ratio: lt.ns has a better P/E ratio (Lower is better for valuation).\n",
            "- 3️⃣ Dividend Yield: tcs.ns offers a higher dividend yield, better for passive income.\n",
            "- 4️⃣ Revenue Growth: tcs.ns has higher revenue, showing stronger business performance.\n",
            "- 📢 News & Updates: [Read More Here](https://finance.yahoo.com/quote/lt.ns/news/)\n"
          ]
        }
      ],
      "source": [
        "import yfinance as yf\n",
        "import pandas as pd\n",
        "from tabulate import tabulate  # Import tabulate for table formatting\n",
        "\n",
        "def get_stock_details(stock_symbol):\n",
        "    stock = yf.Ticker(stock_symbol)\n",
        "    stock_info = stock.info\n",
        "\n",
        "    def safe_get(key):\n",
        "        value = stock_info.get(key, None)\n",
        "        return float(value) if isinstance(value, (int, float)) else None\n",
        "\n",
        "    details = {\n",
        "        'Stock': stock_symbol,\n",
        "        'Current Price (INR)': safe_get('currentPrice'),\n",
        "        'Market Cap': safe_get('marketCap'),\n",
        "        'P/E Ratio': safe_get('trailingPE'),\n",
        "        'Dividend Yield': safe_get('dividendYield'),\n",
        "        '52-Week High': safe_get('fiftyTwoWeekHigh'),\n",
        "        '52-Week Low': safe_get('fiftyTwoWeekLow'),\n",
        "        'Volume': safe_get('volume'),\n",
        "        'Avg Volume': safe_get('averageVolume'),\n",
        "        'Revenue': safe_get('totalRevenue'),\n",
        "        'News Link': f'https://finance.yahoo.com/quote/{stock_symbol}/news/'\n",
        "    }\n",
        "    return details\n",
        "\n",
        "def compare_stocks(stock1, stock2, budget):\n",
        "    stock1_details = get_stock_details(stock1)\n",
        "    stock2_details = get_stock_details(stock2)\n",
        "\n",
        "    comparison_table = pd.DataFrame([stock1_details, stock2_details])\n",
        "    best_stock = None\n",
        "    reasons = []\n",
        "\n",
        "    price1 = stock1_details['Current Price (INR)']\n",
        "    price2 = stock2_details['Current Price (INR)']\n",
        "    pe1 = stock1_details['P/E Ratio']\n",
        "    pe2 = stock2_details['P/E Ratio']\n",
        "    div1 = stock1_details['Dividend Yield']\n",
        "    div2 = stock2_details['Dividend Yield']\n",
        "    rev1 = stock1_details['Revenue']\n",
        "    rev2 = stock2_details['Revenue']\n",
        "\n",
        "    if price1 is not None and price2 is not None:\n",
        "        if price1 <= budget and price2 <= budget:\n",
        "            best_stock = stock1 if price1 < price2 else stock2\n",
        "        elif price1 <= budget:\n",
        "            best_stock = stock1\n",
        "        elif price2 <= budget:\n",
        "            best_stock = stock2\n",
        "    elif price1 is not None and price1 <= budget:\n",
        "        best_stock = stock1\n",
        "    elif price2 is not None and price2 <= budget:\n",
        "        best_stock = stock2\n",
        "\n",
        "    if best_stock:\n",
        "        best_stock_details = stock1_details if best_stock == stock1 else stock2_details\n",
        "        reasons.append(f\"🏆 Recommended Stock: {best_stock}\")\n",
        "        reasons.append(f\"1️⃣ Current Price: ₹{best_stock_details['Current Price (INR)']} is within your budget.\")\n",
        "\n",
        "        if pe1 and pe2:\n",
        "            better_pe = stock1 if pe1 < pe2 else stock2\n",
        "            reasons.append(f\"2️⃣ P/E Ratio: {best_stock} has a better P/E ratio (Lower is better for valuation).\")\n",
        "\n",
        "        if div1 and div2:\n",
        "            better_div = stock1 if div1 > div2 else stock2\n",
        "            reasons.append(f\"3️⃣ Dividend Yield: {better_div} offers a higher dividend yield, better for passive income.\")\n",
        "\n",
        "        if rev1 and rev2:\n",
        "            better_rev = stock1 if rev1 > rev2 else stock2\n",
        "            reasons.append(f\"4️⃣ Revenue Growth: {better_rev} has higher revenue, showing stronger business performance.\")\n",
        "\n",
        "        reasons.append(f\"📢 News & Updates: [Read More Here]({best_stock_details['News Link']})\")\n",
        "\n",
        "    return comparison_table, best_stock, reasons\n",
        "\n",
        "budget = float(input(\"Enter your budget in INR: \"))\n",
        "stock1 = input(\"Enter the symbol of the first stock: \")\n",
        "stock2 = input(\"Enter the symbol of the second stock: \")\n",
        "\n",
        "comparison_table, best_stock, reasons = compare_stocks(stock1, stock2, budget)\n",
        "\n",
        "print(\"\\n📊 Stock Comparison Table:\")\n",
        "print(tabulate(comparison_table, headers='keys', tablefmt='fancy_grid'))\n",
        "\n",
        "if best_stock:\n",
        "    print(\"\\n🎯 Investment Recommendation:\")\n",
        "    for reason in reasons:\n",
        "        print(f\"- {reason}\")\n",
        "else:\n",
        "    print(\"\\n🚨 Unfortunately, neither of the stocks is within your budget.\")"
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "GP-P7KECqSzj"
      },
      "execution_count": null,
      "outputs": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KsXSRBqo1jyd",
        "outputId": "0baf4f58-f83b-4a6c-96d8-797caf24b2b0"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter stock ticker (e.g., AAPL, TSLA, INFY.NS): axisbank.ns\n",
            "\n",
            "============================================================\n",
            "                FUNDAMENTAL ANALYSIS REPORT                 \n",
            "============================================================\n",
            "╒════════════════════════╤═══════════════════╕\n",
            "│ Metric                 │ Value             │\n",
            "╞════════════════════════╪═══════════════════╡\n",
            "│ Company Name           │ Axis Bank Limited │\n",
            "├────────────────────────┼───────────────────┤\n",
            "│ Stock Symbol           │ AXISBANK.NS       │\n",
            "├────────────────────────┼───────────────────┤\n",
            "│ Industry               │ Banks - Regional  │\n",
            "├────────────────────────┼───────────────────┤\n",
            "│ Market Cap (Now)       │ 3170521317376     │\n",
            "├────────────────────────┼───────────────────┤\n",
            "│ Market Cap (IPO)       │ 4574694866944     │\n",
            "├────────────────────────┼───────────────────┤\n",
            "│ IPO Date               │ 1998-11-27        │\n",
            "├────────────────────────┼───────────────────┤\n",
            "│ Current Price          │ 1024.1            │\n",
            "├────────────────────────┼───────────────────┤\n",
            "│ 52 Week High           │ 1339.65           │\n",
            "├────────────────────────┼───────────────────┤\n",
            "│ 52 Week Low            │ 933.5             │\n",
            "├────────────────────────┼───────────────────┤\n",
            "│ P/E Ratio              │ 11.273668         │\n",
            "├────────────────────────┼───────────────────┤\n",
            "│ EPS                    │ 90.84             │\n",
            "├────────────────────────┼───────────────────┤\n",
            "│ Debt/Equity            │ N/A               │\n",
            "├────────────────────────┼───────────────────┤\n",
            "│ Return on Equity (ROE) │ 0.17764999        │\n",
            "├────────────────────────┼───────────────────┤\n",
            "│ Dividend Yield         │ 0.001             │\n",
            "├────────────────────────┼───────────────────┤\n",
            "│ Revenue                │ 667636072448      │\n",
            "├────────────────────────┼───────────────────┤\n",
            "│ Net Income             │ 279283892224      │\n",
            "├────────────────────────┼───────────────────┤\n",
            "│ Operating Margin       │ 0.47516           │\n",
            "├────────────────────────┼───────────────────┤\n",
            "│ Beta (Volatility)      │ 0.944             │\n",
            "├────────────────────────┼───────────────────┤\n",
            "│ Analyst Target Price   │ 1292.2927         │\n",
            "├────────────────────────┼───────────────────┤\n",
            "│ Enterprise Value       │ 4574694866944     │\n",
            "╘════════════════════════╧═══════════════════╛\n",
            "\n",
            " Analysis Summary:\n",
            "- The stock appears undervalued based on P/E Ratio.\n",
            "- The stock is less volatile than the market (Low Beta).\n",
            "- Analysts predict an average target price of 1292.2927.\n"
          ]
        }
      ],
      "source": [
        "import yfinance as yf\n",
        "from tabulate import tabulate\n",
        "from datetime import datetime\n",
        "\n",
        "def get_fundamental_data(ticker):\n",
        "    stock = yf.Ticker(ticker)\n",
        "    info = stock.info\n",
        "\n",
        "    # Convert IPO date from epoch format\n",
        "    ipo_date = datetime.utcfromtimestamp(info.get(\"firstTradeDateEpochUtc\", 0)).strftime('%Y-%m-%d') if info.get(\"firstTradeDateEpochUtc\") else \"N/A\"\n",
        "\n",
        "    fundamentals = {\n",
        "        \"Company Name\": info.get(\"longName\", \"N/A\"),\n",
        "        \"Stock Symbol\": ticker,\n",
        "        \"Industry\": info.get(\"industry\", \"N/A\"),\n",
        "        \"Market Cap (Now)\": info.get(\"marketCap\", \"N/A\"),\n",
        "        \"Market Cap (IPO)\": info.get(\"enterpriseValue\", \"N/A\"),\n",
        "        \"IPO Date\": ipo_date,\n",
        "        \"Current Price\": info.get(\"currentPrice\", \"N/A\"),\n",
        "        \"52 Week High\": info.get(\"fiftyTwoWeekHigh\", \"N/A\"),\n",
        "        \"52 Week Low\": info.get(\"fiftyTwoWeekLow\", \"N/A\"),\n",
        "        \"P/E Ratio\": info.get(\"trailingPE\", \"N/A\"),\n",
        "        \"EPS\": info.get(\"trailingEps\", \"N/A\"),\n",
        "        \"Debt/Equity\": info.get(\"debtToEquity\", \"N/A\"),\n",
        "        \"Return on Equity (ROE)\": info.get(\"returnOnEquity\", \"N/A\"),\n",
        "        \"Dividend Yield\": info.get(\"dividendYield\", \"N/A\"),\n",
        "        \"Revenue\": info.get(\"totalRevenue\", \"N/A\"),\n",
        "        \"Net Income\": info.get(\"netIncomeToCommon\", \"N/A\"),\n",
        "        \"Operating Margin\": info.get(\"operatingMargins\", \"N/A\"),\n",
        "        \"Beta (Volatility)\": info.get(\"beta\", \"N/A\"),\n",
        "        \"Analyst Target Price\": info.get(\"targetMeanPrice\", \"N/A\"),\n",
        "        \"Enterprise Value\": info.get(\"enterpriseValue\", \"N/A\"),\n",
        "    }\n",
        "    return fundamentals\n",
        "\n",
        "def analyze_stock(fundamentals):\n",
        "    print(\"\\n\" + \"=\" * 60)\n",
        "    print(\"FUNDAMENTAL ANALYSIS REPORT\".center(60))\n",
        "    print(\"=\" * 60)\n",
        "    table = [[key, value] for key, value in fundamentals.items()]\n",
        "    print(tabulate(table, headers=[\"Metric\", \"Value\"], tablefmt=\"fancy_grid\"))\n",
        "\n",
        "    print(\"\\n Analysis Summary:\")\n",
        "\n",
        "    # Basic Interpretation\n",
        "    pe = fundamentals[\"P/E Ratio\"]\n",
        "    roe = fundamentals[\"Return on Equity (ROE)\"]\n",
        "    d2e = fundamentals[\"Debt/Equity\"]\n",
        "    div_yield = fundamentals[\"Dividend Yield\"]\n",
        "    beta = fundamentals[\"Beta (Volatility)\"]\n",
        "    target_price = fundamentals[\"Analyst Target Price\"]\n",
        "\n",
        "    if pe != \"N/A\" and isinstance(pe, (int, float)) and pe < 15:\n",
        "        print(\"- The stock appears undervalued based on P/E Ratio.\")\n",
        "    elif pe != \"N/A\" and isinstance(pe, (int, float)) and pe > 25:\n",
        "        print(\"- The stock may be overvalued based on P/E Ratio.\")\n",
        "\n",
        "    if roe != \"N/A\" and isinstance(roe, (int, float)) and roe > 15:\n",
        "        print(\"- The company has a strong Return on Equity (ROE).\")\n",
        "\n",
        "    if d2e != \"N/A\" and isinstance(d2e, (int, float)) and d2e > 2:\n",
        "        print(\"- High Debt/Equity ratio, indicating higher financial risk.\")\n",
        "\n",
        "    if div_yield != \"N/A\" and isinstance(div_yield, (int, float)) and div_yield > 0.03:\n",
        "        print(\"- The stock offers a good dividend yield for income investors.\")\n",
        "\n",
        "    if beta != \"N/A\" and isinstance(beta, (int, float)):\n",
        "        if beta > 1:\n",
        "            print(\"- The stock is more volatile than the market (High Beta).\")\n",
        "        else:\n",
        "            print(\"- The stock is less volatile than the market (Low Beta).\")\n",
        "\n",
        "    if target_price != \"N/A\":\n",
        "        print(f\"- Analysts predict an average target price of {target_price}.\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    ticker = input(\"Enter stock ticker (e.g., AAPL, TSLA, INFY.NS): \").upper()\n",
        "    fundamentals = get_fundamental_data(ticker)\n",
        "    analyze_stock(fundamentals)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 867
        },
        "id": "9ZU1pJSA11Ti",
        "outputId": "bcce0316-aec7-4fc3-e860-d29d80d6a0b4"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Enter stock symbol: tcs.ns\n",
            "\n",
            "Stock Information:\n",
            "Stock: Tata Consultancy Services Limited (TCS.NS)\n",
            "Current Price: 4029.4\n",
            "52-Week Low: 3591.5\n",
            "52-Week High: 4592.25\n",
            "P/E Ratio: 29.907223\n",
            "EPS: 134.73\n",
            "Debt-to-Equity: 8.836\n",
            "ROE: 0.46772\n",
            "Revenue Growth: 0.077\n",
            "Recommendation: HOLD (Technical: Mid-range Price Movement) | HOLD (Fundamental: Average Financials)\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x700 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "source": [
        "import yfinance as yf\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "# Function to get stock details\n",
        "def get_stock_details(stock_symbol):\n",
        "    stock = yf.Ticker(stock_symbol)\n",
        "    stock_info = stock.info\n",
        "\n",
        "    # Extract relevant stock details\n",
        "    details = {\n",
        "        'Stock Name': stock_info.get('longName', 'N/A'),\n",
        "        'Current Price': stock_info.get('currentPrice', 'N/A'),\n",
        "        '1-Year Low': stock_info.get('fiftyTwoWeekLow', 'N/A'),\n",
        "        '1-Year High': stock_info.get('fiftyTwoWeekHigh', 'N/A'),\n",
        "        'P/E Ratio': stock_info.get('trailingPE', 'N/A'),\n",
        "        'EPS': stock_info.get('trailingEps', 'N/A'),\n",
        "        'Debt-to-Equity': stock_info.get('debtToEquity', 'N/A'),\n",
        "        'ROE': stock_info.get('returnOnEquity', 'N/A'),\n",
        "        'Revenue Growth': stock_info.get('revenueGrowth', 'N/A'),\n",
        "    }\n",
        "    return details\n",
        "\n",
        "# Function to provide recommendation\n",
        "def provide_recommendation(details):\n",
        "    current_price = details['Current Price']\n",
        "    year_low = details['1-Year Low']\n",
        "    year_high = details['1-Year High']\n",
        "    pe_ratio = details['P/E Ratio']\n",
        "    eps = details['EPS']\n",
        "    debt_to_equity = details['Debt-to-Equity']\n",
        "    roe = details['ROE']\n",
        "    revenue_growth = details['Revenue Growth']\n",
        "\n",
        "    if current_price == 'N/A' or year_low == 'N/A' or year_high == 'N/A':\n",
        "        return \"Data is not sufficient to provide a recommendation.\"\n",
        "\n",
        "    # Technical Analysis Logic\n",
        "    if current_price <= (year_low + (year_high - year_low) * 0.2):\n",
        "        technical_signal = \"BUY (Technical: Near 52-Week Low)\"\n",
        "    elif current_price >= (year_high - (year_high - year_low) * 0.2):\n",
        "        technical_signal = \"SELL (Technical: Near 52-Week High)\"\n",
        "    else:\n",
        "        technical_signal = \"HOLD (Technical: Mid-range Price Movement)\"\n",
        "\n",
        "    # Fundamental Analysis Logic\n",
        "    fundamental_signal = \"\"\n",
        "    if pe_ratio != 'N/A' and eps != 'N/A' and roe != 'N/A' and revenue_growth != 'N/A':\n",
        "        if pe_ratio < 20 and eps > 0 and roe > 0.15 and revenue_growth > 0.05:\n",
        "            fundamental_signal = \"BUY (Fundamental: Strong Financials)\"\n",
        "        elif pe_ratio > 30 or eps < 0 or roe < 0.05:\n",
        "            fundamental_signal = \"SELL (Fundamental: Weak Financials)\"\n",
        "        else:\n",
        "            fundamental_signal = \"HOLD (Fundamental: Average Financials)\"\n",
        "    else:\n",
        "        fundamental_signal = \"Fundamental data not available\"\n",
        "\n",
        "    return f\"{technical_signal} | {fundamental_signal}\"\n",
        "\n",
        "# Function to plot stock history\n",
        "def plot_stock_history(stock_symbol):\n",
        "    stock = yf.Ticker(stock_symbol)\n",
        "    hist = stock.history(period=\"1y\")\n",
        "\n",
        "    if hist.empty:\n",
        "        print(\"No historical data available for this stock.\")\n",
        "        return\n",
        "\n",
        "    plt.figure(figsize=(14, 7))\n",
        "    plt.plot(hist.index, hist['Close'], label='Closing Price')\n",
        "    plt.title(f'Historical Closing Prices for {stock_symbol}')\n",
        "    plt.xlabel('Date')\n",
        "    plt.ylabel('Price')\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "    plt.show()\n",
        "\n",
        "# Main program\n",
        "def main():\n",
        "    # Get stock symbol from the user\n",
        "    stock_symbol = input(\"Enter stock symbol: \").upper()\n",
        "\n",
        "    # Fetch stock details\n",
        "    details = get_stock_details(stock_symbol)\n",
        "\n",
        "    # Extract details for display\n",
        "    stock_name = details['Stock Name']\n",
        "    current_price = details['Current Price']\n",
        "    year_low = details['1-Year Low']\n",
        "    year_high = details['1-Year High']\n",
        "    pe_ratio = details['P/E Ratio']\n",
        "    eps = details['EPS']\n",
        "    debt_to_equity = details['Debt-to-Equity']\n",
        "    roe = details['ROE']\n",
        "    revenue_growth = details['Revenue Growth']\n",
        "\n",
        "    # Print stock details\n",
        "    print(\"\\nStock Information:\")\n",
        "    print(f\"Stock: {stock_name} ({stock_symbol})\")\n",
        "    print(f\"Current Price: {current_price}\")\n",
        "    print(f\"52-Week Low: {year_low}\")\n",
        "    print(f\"52-Week High: {year_high}\")\n",
        "    print(f\"P/E Ratio: {pe_ratio}\")\n",
        "    print(f\"EPS: {eps}\")\n",
        "    print(f\"Debt-to-Equity: {debt_to_equity}\")\n",
        "    print(f\"ROE: {roe}\")\n",
        "    print(f\"Revenue Growth: {revenue_growth}\")\n",
        "\n",
        "    # Provide recommendation\n",
        "    recommendation = provide_recommendation(details)\n",
        "    print(f\"Recommendation: {recommendation}\")\n",
        "\n",
        "    # Plot stock history\n",
        "    plot_stock_history(stock_symbol)\n",
        "\n",
        "# Run the program\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 671
        },
        "id": "Z-yK7kH92C47",
        "outputId": "e689b246-4a1e-430d-fcd5-cf3f29b9b9f1"
      },
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "(async (port, path, width, height, cache, element) => {\n",
              "    if (!google.colab.kernel.accessAllowed && !cache) {\n",
              "      return;\n",
              "    }\n",
              "    element.appendChild(document.createTextNode(''));\n",
              "    const url = await google.colab.kernel.proxyPort(port, {cache});\n",
              "    const iframe = document.createElement('iframe');\n",
              "    iframe.src = new URL(path, url).toString();\n",
              "    iframe.height = height;\n",
              "    iframe.width = width;\n",
              "    iframe.style.border = 0;\n",
              "    iframe.allow = [\n",
              "        'accelerometer',\n",
              "        'autoplay',\n",
              "        'camera',\n",
              "        'clipboard-read',\n",
              "        'clipboard-write',\n",
              "        'gyroscope',\n",
              "        'magnetometer',\n",
              "        'microphone',\n",
              "        'serial',\n",
              "        'usb',\n",
              "        'xr-spatial-tracking',\n",
              "    ].join('; ');\n",
              "    element.appendChild(iframe);\n",
              "  })(8050, \"/\", \"100%\", 650, false, window.element)"
            ]
          },
          "metadata": {}
        }
      ],
      "source": [
        "import yfinance as yf\n",
        "import dash\n",
        "from dash import dcc, html\n",
        "from dash.dependencies import Input, Output\n",
        "import plotly.graph_objects as go\n",
        "\n",
        "# Fetch stock data\n",
        "def fetch_stock_data(stock_name):\n",
        "    stock = yf.Ticker(stock_name)\n",
        "    hist = stock.history(period=\"1y\")\n",
        "    return hist\n",
        "\n",
        "# Initialize the Dash app\n",
        "app = dash.Dash(__name__)\n",
        "\n",
        "app.layout = html.Div([\n",
        "    html.H1(\"Interactive Stock Chart\"),\n",
        "\n",
        "    html.Label(\"Enter the name of the share/stock (e.g., TCS.NS):\"),\n",
        "    dcc.Input(id='stock_name', type='text', value='TCS.NS'),\n",
        "\n",
        "    html.Label(\"Select Chart Type:\"),\n",
        "    dcc.Dropdown(\n",
        "        id='chart_type',\n",
        "        options=[\n",
        "            {'label': 'Candlestick', 'value': 'candlestick'},\n",
        "            {'label': 'OHLC', 'value': 'ohlc'},\n",
        "            {'label': 'Line', 'value': 'line'},\n",
        "            {'label': 'Area', 'value': 'area'}\n",
        "        ],\n",
        "        value='candlestick'\n",
        "    ),\n",
        "\n",
        "    html.Label(\"Select Indicators:\"),\n",
        "    dcc.Checklist(\n",
        "        id='indicators',\n",
        "        options=[\n",
        "            {'label': 'SMA', 'value': 'SMA'},\n",
        "            {'label': 'EMA', 'value': 'EMA'},\n",
        "            {'label': 'RSI', 'value': 'RSI'}\n",
        "        ],\n",
        "        value=[]\n",
        "    ),\n",
        "\n",
        "    dcc.Graph(id='stock_chart')\n",
        "])\n",
        "\n",
        "@app.callback(\n",
        "    Output('stock_chart', 'figure'),\n",
        "    [Input('stock_name', 'value'),\n",
        "     Input('chart_type', 'value'),\n",
        "     Input('indicators', 'value')]\n",
        ")\n",
        "def update_chart(stock_name, chart_type, indicators):\n",
        "    hist = fetch_stock_data(stock_name)\n",
        "\n",
        "    fig = go.Figure()\n",
        "\n",
        "    # Chart Types\n",
        "    if chart_type == 'candlestick':\n",
        "        fig.add_trace(go.Candlestick(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name='Candlestick'))\n",
        "    elif chart_type == 'ohlc':\n",
        "        fig.add_trace(go.Ohlc(x=hist.index, open=hist['Open'], high=hist['High'], low=hist['Low'], close=hist['Close'], name='OHLC'))\n",
        "    elif chart_type == 'line':\n",
        "        fig.add_trace(go.Scatter(x=hist.index, y=hist['Close'], mode='lines', name='Line'))\n",
        "    elif chart_type == 'area':\n",
        "        fig.add_trace(go.Scatter(x=hist.index, y=hist['Close'], fill='tozeroy', name='Area'))\n",
        "\n",
        "    # Add Indicators\n",
        "    if 'SMA' in indicators:\n",
        "        hist['SMA'] = hist['Close'].rolling(window=20).mean()\n",
        "        fig.add_trace(go.Scatter(x=hist.index, y=hist['SMA'], mode='lines', name='SMA'))\n",
        "    if 'EMA' in indicators:\n",
        "        hist['EMA'] = hist['Close'].ewm(span=20, adjust=False).mean()\n",
        "        fig.add_trace(go.Scatter(x=hist.index, y=hist['EMA'], mode='lines', name='EMA'))\n",
        "    if 'RSI' in indicators:\n",
        "        delta = hist['Close'].diff(1)\n",
        "        gain = delta.where(delta > 0, 0)\n",
        "        loss = -delta.where(delta < 0, 0)\n",
        "        avg_gain = gain.rolling(window=14).mean()\n",
        "        avg_loss = loss.rolling(window=14).mean()\n",
        "        rs = avg_gain / avg_loss\n",
        "        rsi = 100 - (100 / (1 + rs))\n",
        "        fig.add_trace(go.Scatter(x=hist.index, y=rsi, mode='lines', name='RSI'))\n",
        "\n",
        "    fig.update_layout(title=f'{stock_name} Price Movements', yaxis_title='Price', xaxis_title='Date')\n",
        "\n",
        "    return fig\n",
        "\n",
        "if __name__ == '__main__':\n",
        "    app.run_server(debug=True)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mkuiL6NQ2bxl",
        "outputId": "db57bb53-1f09-47c4-fc23-cf0b099e6119"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting dash\n",
            "  Downloading dash-2.18.2-py3-none-any.whl.metadata (10 kB)\n",
            "Collecting Flask<3.1,>=1.0.4 (from dash)\n",
            "  Downloading flask-3.0.3-py3-none-any.whl.metadata (3.2 kB)\n",
            "Collecting Werkzeug<3.1 (from dash)\n",
            "  Downloading werkzeug-3.0.6-py3-none-any.whl.metadata (3.7 kB)\n",
            "Requirement already satisfied: plotly>=5.0.0 in /usr/local/lib/python3.11/dist-packages (from dash) (5.24.1)\n",
            "Collecting dash-html-components==2.0.0 (from dash)\n",
            "  Downloading dash_html_components-2.0.0-py3-none-any.whl.metadata (3.8 kB)\n",
            "Collecting dash-core-components==2.0.0 (from dash)\n",
            "  Downloading dash_core_components-2.0.0-py3-none-any.whl.metadata (2.9 kB)\n",
            "Collecting dash-table==5.0.0 (from dash)\n",
            "  Downloading dash_table-5.0.0-py3-none-any.whl.metadata (2.4 kB)\n",
            "Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.11/dist-packages (from dash) (8.6.1)\n",
            "Requirement already satisfied: typing-extensions>=4.1.1 in /usr/local/lib/python3.11/dist-packages (from dash) (4.12.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from dash) (2.32.3)\n",
            "Collecting retrying (from dash)\n",
            "  Downloading retrying-1.3.4-py3-none-any.whl.metadata (6.9 kB)\n",
            "Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.11/dist-packages (from dash) (1.6.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from dash) (75.1.0)\n",
            "Requirement already satisfied: Jinja2>=3.1.2 in /usr/local/lib/python3.11/dist-packages (from Flask<3.1,>=1.0.4->dash) (3.1.5)\n",
            "Requirement already satisfied: itsdangerous>=2.1.2 in /usr/local/lib/python3.11/dist-packages (from Flask<3.1,>=1.0.4->dash) (2.2.0)\n",
            "Requirement already satisfied: click>=8.1.3 in /usr/local/lib/python3.11/dist-packages (from Flask<3.1,>=1.0.4->dash) (8.1.8)\n",
            "Requirement already satisfied: blinker>=1.6.2 in /usr/local/lib/python3.11/dist-packages (from Flask<3.1,>=1.0.4->dash) (1.9.0)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.11/dist-packages (from plotly>=5.0.0->dash) (9.0.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from plotly>=5.0.0->dash) (24.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from Werkzeug<3.1->dash) (3.0.2)\n",
            "Requirement already satisfied: zipp>=3.20 in /usr/local/lib/python3.11/dist-packages (from importlib-metadata->dash) (3.21.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->dash) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->dash) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->dash) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->dash) (2025.1.31)\n",
            "Requirement already satisfied: six>=1.7.0 in /usr/local/lib/python3.11/dist-packages (from retrying->dash) (1.17.0)\n",
            "Downloading dash-2.18.2-py3-none-any.whl (7.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.8/7.8 MB\u001b[0m \u001b[31m51.9 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading dash_core_components-2.0.0-py3-none-any.whl (3.8 kB)\n",
            "Downloading dash_html_components-2.0.0-py3-none-any.whl (4.1 kB)\n",
            "Downloading dash_table-5.0.0-py3-none-any.whl (3.9 kB)\n",
            "Downloading flask-3.0.3-py3-none-any.whl (101 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m101.7/101.7 kB\u001b[0m \u001b[31m8.3 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading werkzeug-3.0.6-py3-none-any.whl (227 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m228.0/228.0 kB\u001b[0m \u001b[31m16.6 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading retrying-1.3.4-py3-none-any.whl (11 kB)\n",
            "Installing collected packages: dash-table, dash-html-components, dash-core-components, Werkzeug, retrying, Flask, dash\n",
            "  Attempting uninstall: Werkzeug\n",
            "    Found existing installation: Werkzeug 3.1.3\n",
            "    Uninstalling Werkzeug-3.1.3:\n",
            "      Successfully uninstalled Werkzeug-3.1.3\n",
            "  Attempting uninstall: Flask\n",
            "    Found existing installation: Flask 3.1.0\n",
            "    Uninstalling Flask-3.1.0:\n",
            "      Successfully uninstalled Flask-3.1.0\n",
            "Successfully installed Flask-3.0.3 Werkzeug-3.0.6 dash-2.18.2 dash-core-components-2.0.0 dash-html-components-2.0.0 dash-table-5.0.0 retrying-1.3.4\n"
          ]
        }
      ],
      "source": [
        "!pip install dash\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "w3bNPkTLIxIR",
        "outputId": "629a1f93-ccd3-43cc-dd46-58ffd7477d67"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "📧 Email notification sent!\n"
          ]
        }
      ],
      "source": [
        "import yfinance as yf\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "import smtplib\n",
        "from email.message import EmailMessage\n",
        "\n",
        "# Email Credentials (for Email alerts)\n",
        "EMAIL_ADDRESS = \"Parsanjeetk8@gmail.com\"\n",
        "EMAIL_PASSWORD = \"auauxjnmnplwaazk\"\n",
        "EMAIL_TO = \"Parsanjeetk123@gmail.com\"\n",
        "\n",
        "# Stock Symbol to Monitor\n",
        "STOCK_SYMBOL = \"RELIANCE.NS\"  # Change as per your requirement\n",
        "\n",
        "def get_stock_data(stock_symbol):\n",
        "    \"\"\"Fetch stock data & calculate indicators.\"\"\"\n",
        "    stock = yf.Ticker(stock_symbol)\n",
        "    df = stock.history(period=\"1mo\")  # Get 1-month data\n",
        "\n",
        "    df[\"SMA_20\"] = df[\"Close\"].rolling(window=20).mean()  # 20-day Moving Average\n",
        "    df[\"SMA_50\"] = df[\"Close\"].rolling(window=50).mean()  # 50-day Moving Average\n",
        "    df[\"RSI\"] = calculate_rsi(df[\"Close\"], 14)  # RSI Indicator\n",
        "\n",
        "    return df\n",
        "\n",
        "def calculate_rsi(series, period=14):\n",
        "    \"\"\"Calculate Relative Strength Index (RSI).\"\"\"\n",
        "    delta = series.diff()\n",
        "    gain = (delta.where(delta > 0, 0)).rolling(window=period).mean()\n",
        "    loss = (-delta.where(delta < 0, 0)).rolling(window=period).mean()\n",
        "    rs = gain / loss\n",
        "    rsi = 100 - (100 / (1 + rs))\n",
        "    return rsi\n",
        "\n",
        "def generate_signal(df):\n",
        "    \"\"\"Generate Buy, Sell, or Hold signals based on SMA & RSI.\"\"\"\n",
        "    latest = df.iloc[-1]\n",
        "    previous = df.iloc[-2]\n",
        "\n",
        "    # Conditions for Buy, Sell, Hold\n",
        "    if latest[\"SMA_20\"] > latest[\"SMA_50\"] and latest[\"RSI\"] < 30:\n",
        "        return \"BUY ✅\", \"Stock is Oversold with Uptrend.\"\n",
        "    elif latest[\"SMA_20\"] < latest[\"SMA_50\"] and latest[\"RSI\"] > 70:\n",
        "        return \"SELL ❌\", \"Stock is Overbought with Downtrend.\"\n",
        "    else:\n",
        "        return \"HOLD ⏳\", \"Stock is stable.\"\n",
        "\n",
        "def plot_stock_chart(df, stock_symbol):\n",
        "    \"\"\"Generate and save stock trend chart.\"\"\"\n",
        "    plt.figure(figsize=(10, 5))\n",
        "    plt.plot(df.index, df[\"Close\"], label=\"Closing Price\", color=\"blue\")\n",
        "    plt.plot(df.index, df[\"SMA_20\"], label=\"SMA 20\", linestyle=\"dashed\", color=\"red\")\n",
        "    plt.plot(df.index, df[\"SMA_50\"], label=\"SMA 50\", linestyle=\"dashed\", color=\"green\")\n",
        "    plt.xlabel(\"Date\")\n",
        "    plt.ylabel(\"Stock Price (INR)\")\n",
        "    plt.title(f\"Stock Trend: {stock_symbol}\")\n",
        "    plt.legend()\n",
        "    plt.grid()\n",
        "    plt.savefig(\"stock_chart.png\")  # Save chart\n",
        "    plt.close()\n",
        "\n",
        "def send_email_notification(subject, body):\n",
        "    \"\"\"Send an email with stock analysis chart.\"\"\"\n",
        "    msg = EmailMessage()\n",
        "    msg[\"Subject\"] = subject\n",
        "    msg[\"From\"] = EMAIL_ADDRESS\n",
        "    msg[\"To\"] = EMAIL_TO\n",
        "    msg.set_content(body)\n",
        "\n",
        "    with open(\"stock_chart.png\", \"rb\") as f:\n",
        "        msg.add_attachment(f.read(), maintype=\"image\", subtype=\"png\", filename=\"stock_chart.png\")\n",
        "\n",
        "    with smtplib.SMTP_SSL(\"smtp.gmail.com\", 465) as server:\n",
        "        server.login(EMAIL_ADDRESS, EMAIL_PASSWORD)\n",
        "        server.send_message(msg)\n",
        "\n",
        "    print(\"📧 Email notification sent!\")\n",
        "\n",
        "def check_stock_alert():\n",
        "    \"\"\"Monitor stock and send alerts with buy, sell, or hold signals.\"\"\"\n",
        "    df = get_stock_data(STOCK_SYMBOL)\n",
        "    signal, reason = generate_signal(df)\n",
        "\n",
        "    latest_price = df[\"Close\"].iloc[-1]\n",
        "    stock_news_link = f\"https://finance.yahoo.com/quote/{STOCK_SYMBOL}/news/\"\n",
        "\n",
        "    alert_message = (\n",
        "        f\"📢 Stock Alert: {STOCK_SYMBOL}\\n\"\n",
        "        f\"📊 Current Price: ₹{latest_price:.2f}\\n\"\n",
        "        f\"📈 Signal: {signal}\\n\"\n",
        "        f\"💡 Reason: {reason}\\n\"\n",
        "        f\"🔗 News: [Latest Stock News]({stock_news_link})\"\n",
        "    )\n",
        "\n",
        "    # Generate Chart\n",
        "    plot_stock_chart(df, STOCK_SYMBOL)\n",
        "\n",
        "    # Send Email Alert\n",
        "    send_email_notification(f\"Stock Alert: {STOCK_SYMBOL}\", alert_message)\n",
        "\n",
        "# Run the stock monitoring function\n",
        "check_stock_alert()\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "xq_HqBqRpuHk",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 384
        },
        "outputId": "03bebadd-bd0f-4003-b60a-7b6f9542e028"
      },
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'feedparser'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-57-f0de4397ab27>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0myfinance\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0myf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mrequests\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mfeedparser\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'feedparser'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ],
      "source": [
        "import yfinance as yf\n",
        "import requests\n",
        "import feedparser\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import LSTM, Dense, Dropout\n",
        "import os\n",
        "\n",
        "# Suppress TensorFlow Warnings & Training Logs\n",
        "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'  # Suppress TensorFlow warnings\n",
        "tf.get_logger().setLevel('ERROR')  # Suppress training logs\n",
        "\n",
        "# Function to fetch stock data\n",
        "def fetch_stock_data(ticker, period='5y'):\n",
        "    stock = yf.Ticker(ticker)\n",
        "    df = stock.history(period=period)\n",
        "    return df[['Close']]\n",
        "\n",
        "# Function to preprocess data\n",
        "def preprocess_data(data):\n",
        "    scaler = MinMaxScaler(feature_range=(0, 1))\n",
        "    scaled_data = scaler.fit_transform(data)\n",
        "    return scaled_data, scaler\n",
        "\n",
        "# Function to create dataset for LSTM\n",
        "def create_dataset(data, time_step=60):\n",
        "    X, Y = [], []\n",
        "    for i in range(len(data) - time_step - 1):\n",
        "        X.append(data[i:(i + time_step), 0])\n",
        "        Y.append(data[i + time_step, 0])\n",
        "    return np.array(X), np.array(Y)\n",
        "\n",
        "# Function to build LSTM Model\n",
        "def build_lstm_model():\n",
        "    model = Sequential([\n",
        "        LSTM(50, return_sequences=True, input_shape=(60, 1)),\n",
        "        Dropout(0.2),\n",
        "        LSTM(50, return_sequences=False),\n",
        "        Dropout(0.2),\n",
        "        Dense(25),\n",
        "        Dense(1)\n",
        "    ])\n",
        "    model.compile(optimizer='adam', loss='mean_squared_error')\n",
        "    return model\n",
        "\n",
        "# Function to fetch stock news from Google News RSS Feed\n",
        "def get_news_headlines(ticker):\n",
        "    news_url = f\"https://news.google.com/rss/search?q={ticker}+stock&hl=en-IN&gl=IN&ceid=IN:en\"\n",
        "\n",
        "    try:\n",
        "        feed = feedparser.parse(news_url)\n",
        "        if not feed.entries:\n",
        "            return [\"🚨 No recent news available. Stay tuned for updates!\"]\n",
        "        headlines = [f\"📢 {entry.title}\" for entry in feed.entries[:5]]\n",
        "        return headlines\n",
        "    except Exception as e:\n",
        "        print(f\"Error fetching news for {ticker}: {e}\")\n",
        "        return [\"⚠️ Unable to fetch news. Please try again later.\"]\n",
        "\n",
        "# Function to predict stock prices\n",
        "def predict_stock(ticker):\n",
        "    print(f\"\\n🔎 Fetching stock data for {ticker.upper()}...\\n\")\n",
        "    data = fetch_stock_data(ticker)\n",
        "    scaled_data, scaler = preprocess_data(data)\n",
        "    X, Y = create_dataset(scaled_data)\n",
        "    X = X.reshape((X.shape[0], X.shape[1], 1))\n",
        "\n",
        "    model = build_lstm_model()\n",
        "\n",
        "    print(\"\\n📊 Training AI Model for Prediction (Please wait...)\\n\")\n",
        "    model.fit(X, Y, epochs=10, batch_size=32, verbose=0)  # `verbose=0` hides epoch output\n",
        "\n",
        "    last_60_days = scaled_data[-60:]\n",
        "    last_60_days = last_60_days.reshape((1, 60, 1))\n",
        "    future_prices = []\n",
        "\n",
        "    for _ in range(7):\n",
        "        predicted_price = model.predict(last_60_days, verbose=0)[0][0]  # `verbose=0` hides prediction logs\n",
        "        future_prices.append(predicted_price)\n",
        "        last_60_days = np.roll(last_60_days, -1)\n",
        "        last_60_days[0, -1, 0] = predicted_price\n",
        "\n",
        "    future_prices = scaler.inverse_transform(np.array(future_prices).reshape(-1, 1))\n",
        "\n",
        "    # Plot the predictions\n",
        "    plt.figure(figsize=(10, 5))\n",
        "    plt.plot(future_prices, marker='o', linestyle='dashed', color='r', label='Predicted Prices')\n",
        "    plt.title(f'📈 Predicted Stock Prices for {ticker.upper()} (Next 7 Days)')\n",
        "    plt.xlabel('Days')\n",
        "    plt.ylabel('Stock Price')\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "    plt.show()\n",
        "\n",
        "    print(f\"\\n💰 Predicted Prices for Next 7 Days:\")\n",
        "    for i, price in enumerate(future_prices.flatten(), start=1):\n",
        "        print(f\"📆 Day {i}: ₹{price:.2f}\")\n",
        "\n",
        "    # Fetch and print news headlines\n",
        "    news_headlines = get_news_headlines(ticker)\n",
        "    print(\"\\n📰 Possible Reasons for Price Movement:\")\n",
        "    for headline in news_headlines:\n",
        "        print(headline)\n",
        "\n",
        "# Example Usage\n",
        "ticker = input(\"📌 Enter Stock Ticker (e.g., AAPL, TSLA, RELIANCE.NS): \")\n",
        "predict_stock(ticker)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "0YiiFwM2puSb"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "id": "T5ZhKeA7puas"
      },
      "outputs": [],
      "source": []
    },
    {
      "cell_type": "code",
      "execution_count": null,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "meio0QU3Ixcy",
        "outputId": "46d02375-1a3c-41d0-dfc9-f1f25d65c5f7"
      },
      "outputs": [
        {
          "name": "stdout",
          "output_type": "stream",
          "text": [
            "Collecting dash\n",
            "  Downloading dash-2.18.2-py3-none-any.whl.metadata (10 kB)\n",
            "Collecting Flask<3.1,>=1.0.4 (from dash)\n",
            "  Downloading flask-3.0.3-py3-none-any.whl.metadata (3.2 kB)\n",
            "Collecting Werkzeug<3.1 (from dash)\n",
            "  Downloading werkzeug-3.0.6-py3-none-any.whl.metadata (3.7 kB)\n",
            "Requirement already satisfied: plotly>=5.0.0 in /usr/local/lib/python3.11/dist-packages (from dash) (5.24.1)\n",
            "Collecting dash-html-components==2.0.0 (from dash)\n",
            "  Downloading dash_html_components-2.0.0-py3-none-any.whl.metadata (3.8 kB)\n",
            "Collecting dash-core-components==2.0.0 (from dash)\n",
            "  Downloading dash_core_components-2.0.0-py3-none-any.whl.metadata (2.9 kB)\n",
            "Collecting dash-table==5.0.0 (from dash)\n",
            "  Downloading dash_table-5.0.0-py3-none-any.whl.metadata (2.4 kB)\n",
            "Requirement already satisfied: importlib-metadata in /usr/local/lib/python3.11/dist-packages (from dash) (8.5.0)\n",
            "Requirement already satisfied: typing-extensions>=4.1.1 in /usr/local/lib/python3.11/dist-packages (from dash) (4.12.2)\n",
            "Requirement already satisfied: requests in /usr/local/lib/python3.11/dist-packages (from dash) (2.32.3)\n",
            "Collecting retrying (from dash)\n",
            "  Downloading retrying-1.3.4-py3-none-any.whl.metadata (6.9 kB)\n",
            "Requirement already satisfied: nest-asyncio in /usr/local/lib/python3.11/dist-packages (from dash) (1.6.0)\n",
            "Requirement already satisfied: setuptools in /usr/local/lib/python3.11/dist-packages (from dash) (75.1.0)\n",
            "Requirement already satisfied: Jinja2>=3.1.2 in /usr/local/lib/python3.11/dist-packages (from Flask<3.1,>=1.0.4->dash) (3.1.5)\n",
            "Requirement already satisfied: itsdangerous>=2.1.2 in /usr/local/lib/python3.11/dist-packages (from Flask<3.1,>=1.0.4->dash) (2.2.0)\n",
            "Requirement already satisfied: click>=8.1.3 in /usr/local/lib/python3.11/dist-packages (from Flask<3.1,>=1.0.4->dash) (8.1.8)\n",
            "Requirement already satisfied: blinker>=1.6.2 in /usr/local/lib/python3.11/dist-packages (from Flask<3.1,>=1.0.4->dash) (1.9.0)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.11/dist-packages (from plotly>=5.0.0->dash) (9.0.0)\n",
            "Requirement already satisfied: packaging in /usr/local/lib/python3.11/dist-packages (from plotly>=5.0.0->dash) (24.2)\n",
            "Requirement already satisfied: MarkupSafe>=2.1.1 in /usr/local/lib/python3.11/dist-packages (from Werkzeug<3.1->dash) (3.0.2)\n",
            "Requirement already satisfied: zipp>=3.20 in /usr/local/lib/python3.11/dist-packages (from importlib-metadata->dash) (3.21.0)\n",
            "Requirement already satisfied: charset-normalizer<4,>=2 in /usr/local/lib/python3.11/dist-packages (from requests->dash) (3.4.1)\n",
            "Requirement already satisfied: idna<4,>=2.5 in /usr/local/lib/python3.11/dist-packages (from requests->dash) (3.10)\n",
            "Requirement already satisfied: urllib3<3,>=1.21.1 in /usr/local/lib/python3.11/dist-packages (from requests->dash) (2.3.0)\n",
            "Requirement already satisfied: certifi>=2017.4.17 in /usr/local/lib/python3.11/dist-packages (from requests->dash) (2024.12.14)\n",
            "Requirement already satisfied: six>=1.7.0 in /usr/local/lib/python3.11/dist-packages (from retrying->dash) (1.17.0)\n",
            "Downloading dash-2.18.2-py3-none-any.whl (7.8 MB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m7.8/7.8 MB\u001b[0m \u001b[31m59.4 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading dash_core_components-2.0.0-py3-none-any.whl (3.8 kB)\n",
            "Downloading dash_html_components-2.0.0-py3-none-any.whl (4.1 kB)\n",
            "Downloading dash_table-5.0.0-py3-none-any.whl (3.9 kB)\n",
            "Downloading flask-3.0.3-py3-none-any.whl (101 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m101.7/101.7 kB\u001b[0m \u001b[31m6.8 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading werkzeug-3.0.6-py3-none-any.whl (227 kB)\n",
            "\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m228.0/228.0 kB\u001b[0m \u001b[31m14.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hDownloading retrying-1.3.4-py3-none-any.whl (11 kB)\n",
            "Installing collected packages: dash-table, dash-html-components, dash-core-components, Werkzeug, retrying, Flask, dash\n",
            "  Attempting uninstall: Werkzeug\n",
            "    Found existing installation: Werkzeug 3.1.3\n",
            "    Uninstalling Werkzeug-3.1.3:\n",
            "      Successfully uninstalled Werkzeug-3.1.3\n",
            "  Attempting uninstall: Flask\n",
            "    Found existing installation: Flask 3.1.0\n",
            "    Uninstalling Flask-3.1.0:\n",
            "      Successfully uninstalled Flask-3.1.0\n",
            "Successfully installed Flask-3.0.3 Werkzeug-3.0.6 dash-2.18.2 dash-core-components-2.0.0 dash-html-components-2.0.0 dash-table-5.0.0 retrying-1.3.4\n"
          ]
        }
      ],
      "source": [
        "pip install dash"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import yfinance as yf\n",
        "import smtplib\n",
        "import datetime\n",
        "import pandas as pd\n",
        "import numpy as np\n",
        "import requests\n",
        "import matplotlib.pyplot as plt\n",
        "from email.mime.multipart import MIMEMultipart\n",
        "from email.mime.text import MIMEText\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "from keras.models import Sequential\n",
        "from keras.layers import LSTM, Dense\n",
        "\n",
        "# Function to fetch Indian stock market data\n",
        "def get_stock_data(ticker):\n",
        "    stock = yf.Ticker(ticker)\n",
        "    data = stock.history(period=\"6mo\")  # Get last six months’ data\n",
        "    return data\n",
        "\n",
        "# Function to fetch news links for a stock\n",
        "def get_stock_news(ticker):\n",
        "    url = f\"https://finance.yahoo.com/quote/{ticker}/news\"\n",
        "    return url\n",
        "\n",
        "# Function to fetch stock graph link from Yahoo Finance\n",
        "def get_stock_graph(ticker):\n",
        "    url = f\"https://finance.yahoo.com/quote/{ticker}/chart\"\n",
        "    return url\n",
        "\n",
        "# Function to train LSTM model for market shock prediction\n",
        "def train_lstm_model(data):\n",
        "    data = data[['Close']]\n",
        "    scaler = MinMaxScaler(feature_range=(0,1))\n",
        "    data_scaled = scaler.fit_transform(data)\n",
        "\n",
        "    X, y = [], []\n",
        "    for i in range(30, len(data_scaled)):\n",
        "        X.append(data_scaled[i-30:i, 0])\n",
        "        y.append(data_scaled[i, 0])\n",
        "\n",
        "    X, y = np.array(X), np.array(y)\n",
        "    X = np.reshape(X, (X.shape[0], X.shape[1], 1))\n",
        "\n",
        "    model = Sequential()\n",
        "    model.add(LSTM(units=50, return_sequences=True, input_shape=(X.shape[1], 1)))\n",
        "    model.add(LSTM(units=50))\n",
        "    model.add(Dense(units=1))\n",
        "    model.compile(optimizer='adam', loss='mean_squared_error')\n",
        "    model.fit(X, y, epochs=10, batch_size=32)\n",
        "\n",
        "    return model, scaler\n",
        "\n",
        "# Function to predict market shock\n",
        "def predict_market_shock(model, scaler, data):\n",
        "    data = data[['Close']]\n",
        "    last_30_days = data[-30:].values\n",
        "    last_30_days_scaled = scaler.transform(last_30_days)\n",
        "    X_test = np.reshape(last_30_days_scaled, (1, 30, 1))\n",
        "    predicted_price = model.predict(X_test)\n",
        "    predicted_price = scaler.inverse_transform(predicted_price)[0,0]\n",
        "\n",
        "    recent_close = data.iloc[-1, 0]\n",
        "    percent_change = ((predicted_price - recent_close) / recent_close) * 100\n",
        "\n",
        "    if percent_change < -5:\n",
        "        return True, f\"Market Shock Alert: Predicted {percent_change:.2f}% drop!\"\n",
        "    return False, \"No major market shock detected.\"\n",
        "\n",
        "# Function to generate buy/sell signals\n",
        "def generate_trading_signals(data):\n",
        "    data['SMA_50'] = data['Close'].rolling(window=50).mean()\n",
        "    data['SMA_200'] = data['Close'].rolling(window=200).mean()\n",
        "    data['RSI'] = 100 - (100 / (1 + data['Close'].pct_change().rolling(14).mean()))\n",
        "\n",
        "    if data['SMA_50'].iloc[-1] > data['SMA_200'].iloc[-1] and data['RSI'].iloc[-1] < 30:\n",
        "        return \"BUY NOW - Strong Uptrend Signal!\"\n",
        "    elif data['SMA_50'].iloc[-1] < data['SMA_200'].iloc[-1] and data['RSI'].iloc[-1] > 70:\n",
        "        return \"SELL NOW - Strong Downtrend Signal!\"\n",
        "    return \"HOLD - No clear signal.\"\n",
        "\n",
        "# Function to generate personalized investment recommendations\n",
        "def generate_recommendations(risk_level):\n",
        "    if risk_level == \"Low\":\n",
        "        return [\"HDFC Bank\", \"Infosys\", \"TCS\"]\n",
        "    elif risk_level == \"Medium\":\n",
        "        return [\"Reliance\", \"ICICI Bank\", \"L&T\"]\n",
        "    elif risk_level == \"High\":\n",
        "        return [\"Adani Enterprises\", \"Zomato\", \"Paytm\"]\n",
        "    return []\n",
        "\n",
        "# Function to send email\n",
        "def send_email(subject, body, recipient_email):\n",
        "    sender_email = \"Parsanjeetk8@gmail.com\"\n",
        "    sender_password = \"auauxjnmnplwaazk\"\n",
        "\n",
        "    msg = MIMEMultipart()\n",
        "    msg['From'] = sender_email\n",
        "    msg['To'] = recipient_email\n",
        "    msg['Subject'] = subject\n",
        "\n",
        "    msg.attach(MIMEText(body, 'plain'))\n",
        "\n",
        "    server = smtplib.SMTP('smtp.gmail.com', 587)\n",
        "    server.starttls()\n",
        "    server.login(sender_email, sender_password)\n",
        "    text = msg.as_string()\n",
        "    server.sendmail(sender_email, recipient_email, text)\n",
        "    server.quit()\n",
        "\n",
        "# Main execution\n",
        "def main():\n",
        "    ticker = \"TCS.NS\"  # Example Indian stock (TCS from NSE)\n",
        "    data = get_stock_data(ticker)\n",
        "\n",
        "    model, scaler = train_lstm_model(data)\n",
        "    market_shock, shock_message = predict_market_shock(model, scaler, data)\n",
        "    trading_signal = generate_trading_signals(data)\n",
        "    recommendations = generate_recommendations(\"Medium\")\n",
        "    news_link = get_stock_news(ticker)\n",
        "    graph_link = get_stock_graph(ticker)\n",
        "\n",
        "    # Plot graph\n",
        "    plt.figure(figsize=(10,5))\n",
        "    plt.plot(data['Close'], label=\"Closing Price\")\n",
        "    plt.plot(data['SMA_50'], label=\"50-day SMA\", linestyle='dashed')\n",
        "    plt.plot(data['SMA_200'], label=\"200-day SMA\", linestyle='dashed')\n",
        "    plt.legend()\n",
        "    plt.title(f\"Stock Trends for {ticker}\")\n",
        "    plt.xlabel(\"Date\")\n",
        "    plt.ylabel(\"Price (INR)\")\n",
        "    plt.savefig(\"stock_trends.png\")\n",
        "\n",
        "    email_subject = \"AI-Powered Stock Market Insights\"\n",
        "    email_body = f\"Stock: {ticker}\\n{shock_message}\\nTrading Signal: {trading_signal}\\n\\nRecommended Stocks: {', '.join(recommendations)}\\n\\nLatest News: {news_link}\\nStock Chart: {graph_link}\\n\\nCheck the attached graph for insights.\"\n",
        "\n",
        "    send_email(email_subject, email_body, \"jikspatel1191@gmail.com\")\n",
        "    print(\"Email sent successfully!\")\n",
        "\n",
        "if __name__ == \"__main__\":\n",
        "    main()\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "Nr9fa4OcHwOu",
        "outputId": "31464605-e12c-4f70-baf9-b238529b157f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/10\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/keras/src/layers/rnn/rnn.py:200: UserWarning:\n",
            "\n",
            "Do not pass an `input_shape`/`input_dim` argument to a layer. When using Sequential models, prefer using an `Input(shape)` object as the first layer in the model instead.\n",
            "\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 47ms/step - loss: 0.1038\n",
            "Epoch 2/10\n",
            "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step - loss: 0.0425\n",
            "Epoch 3/10\n",
            "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 46ms/step - loss: 0.0417\n",
            "Epoch 4/10\n",
            "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 47ms/step - loss: 0.0356\n",
            "Epoch 5/10\n",
            "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 48ms/step - loss: 0.0336\n",
            "Epoch 6/10\n",
            "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 50ms/step - loss: 0.0326\n",
            "Epoch 7/10\n",
            "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 50ms/step - loss: 0.0312\n",
            "Epoch 8/10\n",
            "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 48ms/step - loss: 0.0281\n",
            "Epoch 9/10\n",
            "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 57ms/step - loss: 0.0292\n",
            "Epoch 10/10\n",
            "\u001b[1m4/4\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m0s\u001b[0m 50ms/step - loss: 0.0291\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stderr",
          "text": [
            "/usr/local/lib/python3.11/dist-packages/sklearn/utils/validation.py:2739: UserWarning:\n",
            "\n",
            "X does not have valid feature names, but MinMaxScaler was fitted with feature names\n",
            "\n",
            "WARNING:tensorflow:5 out of the last 5 calls to <function TensorFlowTrainer.make_predict_function.<locals>.one_step_on_data_distributed at 0x7d6157fbe520> triggered tf.function retracing. Tracing is expensive and the excessive number of tracings could be due to (1) creating @tf.function repeatedly in a loop, (2) passing tensors with different shapes, (3) passing Python objects instead of tensors. For (1), please define your @tf.function outside of the loop. For (2), @tf.function has reduce_retracing=True option that can avoid unnecessary retracing. For (3), please refer to https://www.tensorflow.org/guide/function#controlling_retracing and https://www.tensorflow.org/api_docs/python/tf/function for  more details.\n"
          ]
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\u001b[1m1/1\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 892ms/step\n",
            "Email sent successfully!\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1000x500 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "import yfinance as yf\n",
        "import requests\n",
        "import feedparser\n",
        "import numpy as np\n",
        "import pandas as pd\n",
        "import matplotlib.pyplot as plt\n",
        "from sklearn.preprocessing import MinMaxScaler\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.models import Sequential\n",
        "from tensorflow.keras.layers import LSTM, Dense, Dropout\n",
        "import os\n",
        "\n",
        "# Suppress TensorFlow Warnings & Training Logs\n",
        "os.environ['TF_CPP_MIN_LOG_LEVEL'] = '3'  # Suppress TensorFlow warnings\n",
        "tf.get_logger().setLevel('ERROR')  # Suppress training logs\n",
        "\n",
        "# Function to fetch stock data\n",
        "def fetch_stock_data(ticker, period='5y'):\n",
        "    stock = yf.Ticker(ticker)\n",
        "    df = stock.history(period=period)\n",
        "    return df[['Close']]\n",
        "\n",
        "# Function to preprocess data\n",
        "def preprocess_data(data):\n",
        "    scaler = MinMaxScaler(feature_range=(0, 1))\n",
        "    scaled_data = scaler.fit_transform(data)\n",
        "    return scaled_data, scaler\n",
        "\n",
        "# Function to create dataset for LSTM\n",
        "def create_dataset(data, time_step=60):\n",
        "    X, Y = [], []\n",
        "    for i in range(len(data) - time_step - 1):\n",
        "        X.append(data[i:(i + time_step), 0])\n",
        "        Y.append(data[i + time_step, 0])\n",
        "    return np.array(X), np.array(Y)\n",
        "\n",
        "# Function to build LSTM Model\n",
        "def build_lstm_model():\n",
        "    model = Sequential([\n",
        "        LSTM(50, return_sequences=True, input_shape=(60, 1)),\n",
        "        Dropout(0.2),\n",
        "        LSTM(50, return_sequences=False),\n",
        "        Dropout(0.2),\n",
        "        Dense(25),\n",
        "        Dense(1)\n",
        "    ])\n",
        "    model.compile(optimizer='adam', loss='mean_squared_error')\n",
        "    return model\n",
        "\n",
        "# Function to fetch stock news from Google News RSS Feed\n",
        "def get_news_headlines(ticker):\n",
        "    news_url = f\"https://news.google.com/rss/search?q={ticker}+stock&hl=en-IN&gl=IN&ceid=IN:en\"\n",
        "\n",
        "    try:\n",
        "        feed = feedparser.parse(news_url)\n",
        "        if not feed.entries:\n",
        "            return [\"🚨 No recent news available. Stay tuned for updates!\"]\n",
        "        headlines = [f\"📢 {entry.title}\" for entry in feed.entries[:5]]\n",
        "        return headlines\n",
        "    except Exception as e:\n",
        "        print(f\"Error fetching news for {ticker}: {e}\")\n",
        "        return [\"⚠️ Unable to fetch news. Please try again later.\"]\n",
        "\n",
        "# Function to predict stock prices\n",
        "def predict_stock(ticker):\n",
        "    print(f\"\\n🔎 Fetching stock data for {ticker.upper()}...\\n\")\n",
        "    data = fetch_stock_data(ticker)\n",
        "    scaled_data, scaler = preprocess_data(data)\n",
        "    X, Y = create_dataset(scaled_data)\n",
        "    X = X.reshape((X.shape[0], X.shape[1], 1))\n",
        "\n",
        "    model = build_lstm_model()\n",
        "\n",
        "    print(\"\\n📊 Training AI Model for Prediction (Please wait...)\\n\")\n",
        "    model.fit(X, Y, epochs=10, batch_size=32, verbose=0)  # `verbose=0` hides epoch output\n",
        "\n",
        "    last_60_days = scaled_data[-60:]\n",
        "    last_60_days = last_60_days.reshape((1, 60, 1))\n",
        "    future_prices = []\n",
        "\n",
        "    for _ in range(7):\n",
        "        predicted_price = model.predict(last_60_days, verbose=0)[0][0]  # `verbose=0` hides prediction logs\n",
        "        future_prices.append(predicted_price)\n",
        "        last_60_days = np.roll(last_60_days, -1)\n",
        "        last_60_days[0, -1, 0] = predicted_price\n",
        "\n",
        "    future_prices = scaler.inverse_transform(np.array(future_prices).reshape(-1, 1))\n",
        "\n",
        "    # Plot the predictions\n",
        "    plt.figure(figsize=(10, 5))\n",
        "    plt.plot(future_prices, marker='o', linestyle='dashed', color='r', label='Predicted Prices')\n",
        "    plt.title(f'📈 Predicted Stock Prices for {ticker.upper()} (Next 7 Days)')\n",
        "    plt.xlabel('Days')\n",
        "    plt.ylabel('Stock Price')\n",
        "    plt.legend()\n",
        "    plt.grid(True)\n",
        "    plt.show()\n",
        "\n",
        "    print(f\"\\n💰 Predicted Prices for Next 7 Days:\")\n",
        "    for i, price in enumerate(future_prices.flatten(), start=1):\n",
        "        print(f\"📆 Day {i}: ₹{price:.2f}\")\n",
        "\n",
        "    # Fetch and print news headlines\n",
        "    news_headlines = get_news_headlines(ticker)\n",
        "    print(\"\\n📰 Possible Reasons for Price Movement:\")\n",
        "    for headline in news_headlines:\n",
        "        print(headline)\n",
        "\n",
        "# Example Usage\n",
        "ticker = input(\"📌 Enter Stock Ticker (e.g., AAPL, TSLA, RELIANCE.NS): \")\n",
        "predict_stock(ticker)\n"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 384
        },
        "id": "0d9oWNDVc4Cy",
        "outputId": "b1edd465-9cc3-44c4-d2ed-ba7686b30372"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "error",
          "ename": "ModuleNotFoundError",
          "evalue": "No module named 'feedparser'",
          "traceback": [
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
            "\u001b[0;31mModuleNotFoundError\u001b[0m                       Traceback (most recent call last)",
            "\u001b[0;32m<ipython-input-32-f0de4397ab27>\u001b[0m in \u001b[0;36m<cell line: 0>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0myfinance\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0myf\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      2\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mrequests\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 3\u001b[0;31m \u001b[0;32mimport\u001b[0m \u001b[0mfeedparser\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      4\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mnumpy\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0;32mimport\u001b[0m \u001b[0mpandas\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n",
            "\u001b[0;31mModuleNotFoundError\u001b[0m: No module named 'feedparser'",
            "",
            "\u001b[0;31m---------------------------------------------------------------------------\u001b[0;32m\nNOTE: If your import is failing due to a missing package, you can\nmanually install dependencies using either !pip or !apt.\n\nTo view examples of installing some common dependencies, click the\n\"Open Examples\" button below.\n\u001b[0;31m---------------------------------------------------------------------------\u001b[0m\n"
          ],
          "errorDetails": {
            "actions": [
              {
                "action": "open_url",
                "actionText": "Open Examples",
                "url": "/notebooks/snippets/importing_libraries.ipynb"
              }
            ]
          }
        }
      ]
    }
  ],
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 0
}